import _regeneratorRuntime from "/Users/william/Dropbox/redux-tools/node_modules/@babel/runtime/regenerator";
import _asyncToGenerator from "/Users/william/Dropbox/redux-tools/node_modules/@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "/Users/william/Dropbox/redux-tools/node_modules/@babel/runtime/helpers/esm/objectSpread";

/* global fetch */

/* eslint max-params:off */
import { getPlatform, platforms } from './utils';

var getRequest = function getRequest(method, payload) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (options.token) {
    options.headers = options.headers || {};
    options.headers['X-Amz-Security-Token'] = options.token;
    delete options.token;
  }

  if (payload && method.toUpperCase() !== 'GET') {
    options.body = JSON.stringify(payload);
  }

  return _objectSpread({}, options, {
    headers: _objectSpread({
      Accept: 'application/json',
      'Content-Type': 'application/json'
    }, options.headers || {}),
    method: method.toUpperCase()
  });
};

var api =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee(method, url, payload, options) {
    var response, jsonResponse;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (getPlatform() === platforms.BROWSER || getPlatform() === platforms.NODE) {
              require('isomorphic-fetch');
            }

            _context.next = 3;
            return fetch(url, getRequest(method, payload, options));

          case 3:
            response = _context.sent;
            _context.next = 6;
            return response.json();

          case 6:
            jsonResponse = _context.sent;
            return _context.abrupt("return", jsonResponse);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function api(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

export var del = function del(url, payload, options) {
  return api('DELETE', url, payload, options);
};
export var get = function get(url, options) {
  return api('GET', url, null, options);
};
export var post = function post(url, payload, options) {
  return api('POST', url, payload, options);
};
export var put = function put(url, payload, options) {
  return api('PUT', url, payload, options);
};
export var remove = function remove(url, payload, options) {
  return api('DELETE', url, payload, options);
};
export var urlEncodeParams = function urlEncodeParams(params) {
  return Object.keys(params).map(function (key) {
    return "".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(params[key]));
  }).join('&');
};
export default {
  del: del,
  get: get,
  post: post,
  put: put,
  remove: remove,
  urlEncodeParams: urlEncodeParams
};