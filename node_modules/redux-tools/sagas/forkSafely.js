import _toConsumableArray from "/Users/william/Dropbox/redux-tools/node_modules/@babel/runtime/helpers/esm/toConsumableArray";
import { fork, takeEvery, takeLatest, throttle } from 'redux-saga/effects';
import takeLatestPerKey from './takeLatestPerKey';
import wrapSagaSafely from './wrapSagaSafely';
var sagaHelpers = [takeEvery, takeLatest, takeLatestPerKey];

var forkSafely = function forkSafely(sagaHelper) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (sagaHelper === throttle) {
    var ms = args[0],
        fn = args[1],
        pattern = args[2],
        saga = args[3],
        rest = args.slice(4);
    return fork.apply(void 0, [sagaHelper, ms, fn, pattern, wrapSagaSafely(saga)].concat(_toConsumableArray(rest)));
  } else if (sagaHelpers.includes(sagaHelper)) {
    var _pattern = args[0],
        _saga = args[1],
        _rest = args.slice(2);

    return fork.apply(void 0, [sagaHelper, _pattern, wrapSagaSafely(_saga)].concat(_toConsumableArray(_rest)));
  }

  return fork.apply(void 0, [wrapSagaSafely(sagaHelper)].concat(args));
};

export default forkSafely;