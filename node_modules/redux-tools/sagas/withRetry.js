import _regeneratorRuntime from "/Users/william/Dropbox/redux-tools/node_modules/@babel/runtime/regenerator";

/* eslint max-statements: off, consistent-return: off */
import { call } from 'redux-saga/effects';
import { delay } from 'redux-saga';
import retryStrategies from './retryStrategies';

var withRetry = function withRetry() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$baseDelay = _ref.baseDelay,
      baseDelay = _ref$baseDelay === void 0 ? 100 : _ref$baseDelay,
      _ref$logFailures = _ref.logFailures,
      logFailures = _ref$logFailures === void 0 ? true : _ref$logFailures,
      _ref$retryAttempts = _ref.retryAttempts,
      retryAttempts = _ref$retryAttempts === void 0 ? 5 : _ref$retryAttempts,
      _ref$retryStrategy = _ref.retryStrategy,
      retryStrategy = _ref$retryStrategy === void 0 ? 'exponential' : _ref$retryStrategy;

  return function (fn) {
    return (
      /*#__PURE__*/
      _regeneratorRuntime.mark(function wrappedWithRetry() {
        var i,
            _len,
            args,
            _key,
            result,
            _args = arguments;

        return _regeneratorRuntime.wrap(function wrappedWithRetry$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                i = 0;

                for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = _args[_key];
                }

              case 2:
                if (!(i < retryAttempts)) {
                  _context.next = 21;
                  break;
                }

                _context.prev = 3;
                _context.next = 6;
                return call.apply(void 0, [fn].concat(args));

              case 6:
                result = _context.sent;
                return _context.abrupt("return", result);

              case 10:
                _context.prev = 10;
                _context.t0 = _context["catch"](3);
                i += 1;

                if (logFailures) {
                  console.log(_context.t0, fn, args);
                }

                if (!(i === retryAttempts)) {
                  _context.next = 17;
                  break;
                }

                _context.t0.fn = fn.toString();
                throw _context.t0;

              case 17:
                _context.next = 19;
                return delay(baseDelay * retryStrategies[retryStrategy](i));

              case 19:
                _context.next = 2;
                break;

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, wrappedWithRetry, this, [[3, 10]]);
      })
    );
  };
};

export default withRetry;