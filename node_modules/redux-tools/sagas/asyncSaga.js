import _regeneratorRuntime from "/Users/william/Dropbox/redux-tools/node_modules/@babel/runtime/regenerator";
import { call, put } from 'redux-saga/effects';

var asyncSaga = function asyncSaga(fn) {
  return (
    /*#__PURE__*/
    _regeneratorRuntime.mark(function asyncSagaWrapper(action) {
      var payload;
      return _regeneratorRuntime.wrap(function asyncSagaWrapper$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return call(fn, action);

            case 3:
              payload = _context.sent;
              _context.next = 6;
              return put({
                payload: payload,
                type: action.type.replace('_REQUEST', '_SUCCESS')
              });

            case 6:
              _context.next = 12;
              break;

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              _context.next = 12;
              return put({
                error: _context.t0,
                payload: action.payload,
                retry: action,
                type: action.type.replace('_REQUEST', '_FAILURE')
              });

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, asyncSagaWrapper, this, [[0, 8]]);
    })
  );
};

export default asyncSaga;