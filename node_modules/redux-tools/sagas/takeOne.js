import _regeneratorRuntime from "/Users/william/Dropbox/redux-tools/node_modules/@babel/runtime/regenerator";
import _toConsumableArray from "/Users/william/Dropbox/redux-tools/node_modules/@babel/runtime/helpers/esm/toConsumableArray";
import { call, take } from 'redux-saga/effects';

var takeOne =
/*#__PURE__*/
_regeneratorRuntime.mark(function takeOne(pattern, saga) {
  var action,
      _len,
      args,
      _key,
      _args = arguments;

  return _regeneratorRuntime.wrap(function takeOne$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return take(pattern);

        case 2:
          action = _context.sent;

          for (_len = _args.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = _args[_key];
          }

          _context.next = 6;
          return call.apply(void 0, [saga].concat(_toConsumableArray(args.concat(action))));

        case 6:
        case "end":
          return _context.stop();
      }
    }
  }, takeOne, this);
});

export default takeOne;