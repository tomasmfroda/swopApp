import _regeneratorRuntime from "/Users/william/Dropbox/redux-tools/node_modules/@babel/runtime/regenerator";
import _slicedToArray from "/Users/william/Dropbox/redux-tools/node_modules/@babel/runtime/helpers/esm/slicedToArray";
import { all, put, race, take } from 'redux-saga/effects';

var dispatchAndListen =
/*#__PURE__*/
_regeneratorRuntime.mark(function dispatchAndListen(actions, successTypes, failureTypes) {
  var raceTypes, _ref, _ref2, result;

  return _regeneratorRuntime.wrap(function dispatchAndListen$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          raceTypes = {
            failure: failureTypes ? race(failureTypes.map(function (type) {
              return take(type);
            })) : undefined,
            success: all(successTypes.map(function (type) {
              return take(type);
            }))
          };
          _context.next = 3;
          return all([race(raceTypes), all(actions.map(function (action) {
            return put(action);
          }))]);

        case 3:
          _ref = _context.sent;
          _ref2 = _slicedToArray(_ref, 1);
          result = _ref2[0];
          return _context.abrupt("return", result);

        case 7:
        case "end":
          return _context.stop();
      }
    }
  }, dispatchAndListen, this);
});

export default dispatchAndListen;