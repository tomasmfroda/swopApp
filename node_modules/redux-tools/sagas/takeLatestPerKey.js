import _regeneratorRuntime from "/Users/william/Dropbox/redux-tools/node_modules/@babel/runtime/regenerator";
import _toConsumableArray from "/Users/william/Dropbox/redux-tools/node_modules/@babel/runtime/helpers/esm/toConsumableArray";

/* eslint max-params: off, no-constant-condition: off*/
import { cancel, fork, take } from 'redux-saga/effects';

var takeLatestPerKey = function takeLatestPerKey(pattern, key, saga) {
  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  return fork(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function takeLatestPerKeyInternal() {
    var lastTasks, action;
    return _regeneratorRuntime.wrap(function takeLatestPerKeyInternal$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            lastTasks = {};

          case 1:
            if (!true) {
              _context.next = 13;
              break;
            }

            _context.next = 4;
            return take(pattern);

          case 4:
            action = _context.sent;

            if (!lastTasks[action.payload[key]]) {
              _context.next = 8;
              break;
            }

            _context.next = 8;
            return cancel(lastTasks[action.payload[key]]);

          case 8:
            _context.next = 10;
            return fork.apply(void 0, [saga].concat(_toConsumableArray(args.concat(action))));

          case 10:
            lastTasks[key] = _context.sent;
            _context.next = 1;
            break;

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, takeLatestPerKeyInternal, this);
  }));
};

export default takeLatestPerKey;